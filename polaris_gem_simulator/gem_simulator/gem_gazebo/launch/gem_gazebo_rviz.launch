<?xml version="1.0"?>
<launch>
  <arg name="robot_name" default="gem"/>

  <!-- Settings added by Evgenii-->
  <env name="GAZEBO_PLUGIN_PATH" value="/opt/ros/noetic/lib:$(optenv GAZEBO_PLUGIN_PATH)"/>
  
  
  <!-- NAV: planner args -->
  <arg name="frame_id"            default="map"/>
  <arg name="waypoints_file"      default="$(find gem_gazebo)/config/track_waypoints.csv"/>
  <arg name="start_radius"        default="2.0"/>   <!-- meters: distance «ready to start» near of the first waypoint -->
  <arg name="goal_radius"         default="2.0"/>   <!-- meters: path finished radius -->
  <arg name="start_speed_thresh"  default="0.2"/>   <!-- meters/sec: stay before start -->
  <arg name="stop_at_goal"        default="true"/>
  <arg name="pose_topic"          default="/$(arg robot_name)/odom"/>
  
   
  <arg name="controller" default="pure_pursuit"/>
  <arg name="output_cmd_topic" default="/gem/ackermann_cmd"/>
  
  <!-- Gazebo settings -->
  <arg name="cmd_timeout" default="1.0"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="$(find gem_gazebo)/worlds/simple_track_green.world"/>
  <arg name="use_rviz" default="true"/>

  <!-- Launch Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg world_name)"/>
  </include> 

  <!-- Vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.05"/>
  <arg name="yaw" default="0.0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="init_pose" value="-x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
  
  <!-- Sensor settings -->
  
  <arg name="velodyne_points" default="false"/>
  <arg name="laser_points" default="false"/>
  
  <!-- Vehicle settings -->
  <group ns="$(arg robot_name)"> 
  
    <!-- robot_description is used by nodes that publish to joint_states. -->
    <param name="robot_description" 
           command="$(find xacro)/xacro '$(find gem_description)/urdf/gem.urdf.xacro' robotname:='$(arg robot_name)' velodyne_points:='$(arg velodyne_points)' laser_points:='$(arg laser_points)' "/>  
  
  
    <!-- Robot name is Gazebo, currently is only "gem" -->
    <node name="spawn_model_$(arg robot_name)" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-param robot_description -model $(arg robot_name) -urdf $(arg init_pose) -robot_namespace /$(arg robot_name)"/>
    
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find gem_gazebo)/config/gem_joint_control_params.yaml" command="load" ns="/$(arg robot_name)"/>

    <!-- Load the joint controllers. One of these publishes the joint states to joint_states. -->
    <node name="controller_spawner_$(arg robot_name)" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/$(arg robot_name)"
          args="left_steering_ctrlr right_steering_ctrlr left_front_wheel_ctrlr right_front_wheel_ctrlr left_rear_wheel_ctrlr right_rear_wheel_ctrlr joint_state_ctrlr"/>  
            
    <!-- Read joint positions from joint_states, then publish the vehicle's state to tf. -->
    <node name="robot_state_publisher_$(arg robot_name)" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <param name="publish_frequency" type="double" value="30.0" />
      <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
    </node>             
          
    <!-- Read joint positions from a GUI, then publish them to joint_states. -->
    <node name="joint_state_publisher_$(arg robot_name)" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false" output="screen">
      <!-- value is important for Rviz -->
      <param name="rate" value="0.1"/> 
      <param name="use_gui" value="false"/>
      <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
    </node>  
  
    <!-- Control the steering, axel joints. -->
    <node name="ackermann_controller_$(arg robot_name)" pkg="gem_gazebo" type="gem_control.py">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find gem_gazebo)/config/gem_ackermann_control_params.yaml" command="load"/>
    </node>
    
    <!--node name="gem_cmdvel_$(arg robot_name)" pkg="gem_gazebo" type="gem_cmdvel.py" /-->
    
    <node if="$(arg use_rviz)" name="rviz_$(arg robot_name)" pkg="rviz" type="rviz" args="-d $(find gem_description)/config_rviz/gem_gazebo_rviz.rviz" />
    
    



    <!-- Vision LKA -->
    <node pkg="gem_lane_keeping" type="vision_lka.py" name="vision_lka" output="screen" ns="/">
      <remap from="image" to="/gem/front_single_camera/image_raw"/>

      <!-- topics -->
      <remap from="cmd"           to="/vision_lka/cmd"/>
      <remap from="debug"         to="/vision_lka/debug"/>
      <remap from="lateral_error" to="/vision_lka/lateral_error"/>

      <!-- PID gains  -->
      <param name="kp"         value="0.030"/>
      <param name="ki"         value="0.001"/>
      <param name="kd"         value="0.080"/>
      <param name="k_heading"  value="0.100"/>
      <param name="der_alpha"  value="0.7"/>
      <param name="i_decay"    value="0.02"/>

      <!-- steering limits -->
      <param name="steer_limit"        value="0.90"/>
      <param name="steer_rate_limit"   value="2.0"/>
      <param name="steer_alpha"        value="0.0"/>   
      <param name="steer_sign"         value="1.0"/>   <!-- -1 if steering is inverted-->

      <!-- speed profile -->
      <param name="target_speed"   value="3.5"/>
      <param name="min_speed"      value="0.6"/>
      <param name="k_curve_speed"  value="8.0"/>
      <param name="steer_slowdown" value="0.15"/>
      <param name="recovery_speed" value="0.4"/>

      <!-- ROI & scans -->
      <param name="roi_y_top" value="0.62"/>                 <!-- синоним roi_top -->
      <rosparam param="scan_rows">[0.55,0.65,0.75,0.85,0.95]</rosparam>
      <param name="min_valid_rows"     value="1"/>
      <param name="min_lane_width_px"  value="10"/>
      <param name="min_mask_area"      value="150"/>
      <param name="hold_bad_ms"        value="600"/>

      <!-- color/edge -->
      <param name="white_v_min" value="120"/>
      <param name="white_s_max" value="120"/>
      
      <param name="use_yellow_hsv" value="true"/>
      <param name="yellow_h_lo" value="15"/>
      <param name="yellow_h_hi" value="45"/>
      <param name="yellow_s_min" value="60"/>
      <param name="yellow_v_min" value="60"/>

      <param name="canny_low"  value="60"/>
      <param name="canny_high" value="150"/>
      <param name="hough_threshold"   value="25"/>
      <param name="hough_min_length"  value="60"/>
      <param name="hough_max_gap"     value="20"/>
      <param name="hough_min_angle_deg" value="15"/>

      <!-- debug -->
      <param name="debug_overlay" value="true"/>
    </node>
   
    
    <!-- bridge: /gazebo/model_states -> /gem/odom -->
    <node pkg="gem_nav" type="model_states_to_odom.py" name="model_states_to_odom" output="screen">
      <param name="model_name"  value="$(arg robot_name)"/>
      <param name="frame_id"    value="odom"/>
      <param name="child_frame" value="base_link"/>
      <param name="odom_topic"  value="odom"/> 
    </node>
    
    
    <!-- NAV: Task Planner -->
    <!-- Default 
    <node pkg="gem_nav" type="task_planner.py" name="task_planner" output="screen">
      <param name="frame_id"           value="$(arg frame_id)"/>
      <param name="waypoints_file"     value="$(arg waypoints_file)"/>
      <param name="start_radius"       value="$(arg start_radius)"/>
      <param name="goal_radius"        value="$(arg goal_radius)"/>
      <param name="start_speed_thresh" value="$(arg start_speed_thresh)"/>
      <param name="stop_at_goal"       value="$(arg stop_at_goal)"/>
      <param name="pose_topic"         value="$(arg pose_topic)"/>
    </node>
    -->
    <node pkg="gem_nav" type="task_planner.py" name="task_planner" output="screen">
      <param name="frame_id"           value="odom"/>        
      <param name="pose_topic"         value="odom"/>         
      <param name="waypoints_file"     value="$(find gem_gazebo)/config/track_waypoints.csv"/>
      <param name="start_radius"       value="2.0"/>          
      <param name="goal_radius"        value="2.0"/>
      <param name="start_speed_thresh" value="0.2"/>
      <param name="stop_at_goal"       value="true"/>
    </node>
    
    
    
    <!-- Supervisor: aggregate  sensors and publish robot_state + safety/stop -->
    <node pkg="gem_core" type="supervisor.py" name="gem_supervisor" output="screen">
      <!-- Settings -->
      <param name="battery_thresh_pct" value="50.0"/>
      <param name="temp_thresh_c" value="55.0"/>
      <param name="gps_hacc_thresh_mm" value="200.0"/>
      <param name="gps_timeout_bad_s" value="15.0"/>
      <param name="net_timeout_disconnected_s" value="20.0"/>
      <param name="net_timeout_low_s" value="10.0"/>
      <param name="cmd_activity_topic" value="$(arg output_cmd_topic)"/>
    </node>
    
    <!-- NAV: Pure Pursuit (with new interface) -->
    <node pkg="gem_core" type="pure_pursuit.py" name="pure_pursuit" output="screen">
      <!-- controller params -->
      <rosparam param="lookahead">3.0</rosparam>
      <param name="cruise_speed" value="1.5"/>

      <!--  remaps to GLOBAL topics -->
      <remap from="cmd"    to="/pure_pursuit/cmd"/>
      <remap from="path"   to="/pure_pursuit/path"/>
      <remap from="enable" to="/pure_pursuit/enable"/>
      <remap from="status" to="/pure_pursuit/status"/> 
    </node>

    <!-- Mux: chosing of active path-tracking controller -->
    <node pkg="gem_core" type="controller_mux.py" name="controller_mux" output="screen">
      <param name="output_cmd_topic" value="$(arg output_cmd_topic)"/>
      <!--param name="default_controller" value="$(arg controller)"/-->
      <param name="default_controller" value="vision_lka"/>
      <rosparam param="inputs">
        pure_pursuit: "/pure_pursuit/cmd"
        stanley:      "/stanley/cmd"
        vision_lka:   "/vision_lka/cmd"
        # mpc:        "/mpc/cmd"   
      </rosparam>
    </node>
    
    <node pkg="gem_core" type="health_sim.py" name="health_sim" output="screen"/>
    
    <!--
    <node pkg="gem_gazebo" type="gem_control.py" name="ackermann_controller_gem" output="screen">
      <param name="battery_min_pct" value="50.0"/>
      <param name="temp_max_c" value="55.0"/>
      <param name="gps_acc_thresh_mm" value="200.0"/>
      <param name="gps_bad_timeout" value="15.0"/>
      <param name="net_timeout_none" value="10.0"/>
      <param name="net_timeout_low"  value="20.0"/>
      <param name="idle_speed_eps"   value="0.05"/>

      <param name="e_stop_topic"     value="/safety/stop"/>
      <param name="battery_topic"    value="/battery_state"/>
      <param name="temp_topic"       value="/temperature"/>
      <param name="gps_acc_topic"    value="/gps/hacc_mm"/>
      <param name="net_signal_topic" value="/net/signal"/>
    </node>
    -->

      
  </group> 
   
</launch>





